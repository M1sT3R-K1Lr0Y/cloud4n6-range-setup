AWSTemplateFormatVersion: 2010-09-09
Description: 'VPC Peering Setup'

#Define VPC CIDR blocks
Parameters:
  BlueVpcCIDR:
    Type: String
    Default: '10.0.0.0/16'
    Description: 'CIDR block for blue-range VPC'
  RedVpcCIDR:
    Type: String
    Default: '10.1.0.0/16'
    Description: 'CIDR block for red-range VPC'
  CyberVpcCIDR:
    Type: String
    Default: '10.2.0.0/16'
    Description: 'CIDR block for cyber-range VPC'

Resources:
#Define VPCs
  BlueVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref BlueVpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: 'blue-range'

  RedVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref RedVpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: 'red-range'

  CyberVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref CyberVpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: 'cyber-range'

#Define blue subnets
  BluePublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref BlueVPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: 'us-east-1a'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'blue-subnet-1'

  BluePublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref BlueVPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: 'us-east-1b'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'blue-subnet-2'

  BluePrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref BlueVPC
      CidrBlock: '10.0.3.0/24'
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: 'blue-private-range-1'

  BluePrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref BlueVPC
      CidrBlock: '10.0.4.0/24'
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: 'blue-private-range-2'

#Define red subnets
  RedPublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref RedVPC
      CidrBlock: '10.1.0.0/24'
      AvailabilityZone: 'us-east-1a'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'red-subnet-1'

  RedPublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref RedVPC
      CidrBlock: '10.1.1.0/24'
      AvailabilityZone: 'us-east-1b'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'red-subnet-2'

#define cyber subnets
  CyberPrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref CyberVPC
      CidrBlock: '10.2.0.0/24'
      AvailabilityZone: 'us-east-1a'
      Tags:
        - Key: Name
          Value: 'cyber-subnet-1'

  CyberPrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref CyberVPC
      CidrBlock: '10.2.1.0/24'
      AvailabilityZone: 'us-east-1b'
      Tags:
        - Key: Name
          Value: 'cyber-subnet-2'

#associate IPv6 CIDR blocks
  RedVpcIpv6CidrBlockAssociation:
    Type: 'AWS::EC2::VPCCidrBlock'
    Properties:
      VpcId: !Ref RedVPC
      AmazonProvidedIpv6CidrBlock: true

  CyberVpcIpv6CidrBlockAssociation:
    Type: 'AWS::EC2::VPCCidrBlock'
    Properties:
      VpcId: !Ref CyberVPC
      AmazonProvidedIpv6CidrBlock: true

#establish peering connections
  BlueToCyberPeeringConnection:
    Type: 'AWS::EC2::VPCPeeringConnection'
    Properties:
      PeerVpcId: !Ref CyberVPC
      VpcId: !Ref BlueVPC
      Tags:
        - Key: Name
          Value: blue-to-cyber-peering

  RedToCyberPeeringConnection:
    Type: 'AWS::EC2::VPCPeeringConnection'
    Properties:
      PeerVpcId: !Ref CyberVPC
      VpcId: !Ref RedVPC
      Tags:
        - Key: Name
          Value: red-to-cyber-peering

#create SubnetRouteTables
  BluePrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref BlueVPC
      Tags:
        - Key: Name
          Value: 'BlueRouteTable'

  RedPrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref RedVPC
      Tags:
        - Key: Name
          Value: 'RedRouteTable'

  CyberPrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref CyberVPC
      Tags:
        - Key: Name
          Value: 'CyberRouteTable'

#create SubnetRouteTableAssociations

  BlueToCyberRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: BlueToCyberPeeringConnection
    Properties:
      RouteTableId: !Ref BluePrivateRouteTable
      DestinationCidrBlock: '10.2.0.0/16'
      VpcPeeringConnectionId: !Ref BlueToCyberPeeringConnection
      Tags:
        - Key: Name
          Value: 'bluevpc-to-cybervpc-route'

  CyberToBlueRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: BlueToCyberPeeringConnection
    Properties:
      RouteTableId: !Ref CyberPrivateRouteTable
      DestinationCidrBlock: '10.0.0.0/16'
      VpcPeeringConnectionId: !Ref BlueToCyberPeeringConnection
      Tags:
        - Key: Name
          Value: 'cybervpc-to-bluevpc-route'

  RedToCyberRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: RedToCyberPeeringConnection
    Properties:
      RouteTableId: !Ref RedPrivateRouteTable
      DestinationCidrBlock: '10.2.0.0/16'
      VpcPeeringConnectionId: !Ref RedToCyberPeeringConnection
      Tags:
        - Key: Name
          Value: 'redvpc-to-cybervpc-route'

  CyberToRedRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: RedToCyberPeeringConnection
    Properties:
      RouteTableId: !Ref CyberPrivateRouteTable
      DestinationCidrBlock: '10.1.0.0/16'
      VpcPeeringConnectionId: !Ref RedToCyberPeeringConnection
      Tags:
        - Key: Name
          Value: 'cybervpc-to-redvpc-route'

#Outputs
Outputs:
  BlueVPCId:
    Description: VPC ID of the Blue VPC
    Value: !Ref BlueVPC

  RedVPCId:
    Description: VPC ID of the Red VPC
    Value: !Ref RedVPC

  CyberVPCId:
    Description: VPC ID of the Cyber VPC
    Value: !Ref CyberVPC
